def louvain_algorithm(graph):
    # Initialize each node as its own community
    communities = {node: node for node in graph.nodes()}
    improvement = True
    while improvement:
        improvement = False
        for node in graph.nodes():
            best_community = communities[node]
            max_delta_Q = 0
            for neighbor in graph.neighbors(node):
                delta_Q = compute_delta_Q(node, neighbor, communities, graph)
                if delta_Q > max_delta_Q:
                    max_delta_Q = delta_Q
                    best_community = communities[neighbor]
            if best_community != communities[node]:
                communities[node] = best_community
                improvement = True
    return communities