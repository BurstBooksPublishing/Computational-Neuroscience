import numpy as np
import matplotlib.pyplot as plt

# Constants
C_m = 1.0  # Membrane capacitance (uF/cm^2)
g_Na = 120.0  # Sodium conductance (mS/cm^2)
g_K = 36.0  # Potassium conductance (mS/cm^2)
g_L = 0.3  # Leak conductance (mS/cm^2)
E_Na = 50.0  # Sodium reversal potential (mV)
E_K = -77.0  # Potassium reversal potential (mV)
E_L = -54.387  # Leak reversal potential (mV)

# Time parameters
dt = 0.01  # Time step (ms)
t_max = 50.0  # Total simulation time (ms)
t = np.arange(0, t_max, dt)

# Initial conditions
V = -65.0  # Membrane potential (mV)
m = 0.05  # Sodium activation gating variable
h = 0.6  # Sodium inactivation gating variable
n = 0.32  # Potassium activation gating variable

# External current
I_ext = np.zeros_like(t)
I_ext[1000:2000] = 10.0  # Apply a current pulse (uA/cm^2)

# Functions for alpha and beta
def alpha_m(V):
    return 0.1 * (V + 40.0) / (1.0 - np.exp(-(V + 40.0) / 10.0))

def beta_m(V):
    return 4.0 * np.exp(-(V + 65.0) / 18.0)

def alpha_h(V):
    return 0.07 * np.exp(-(V + 65.0) / 20.0)

def beta_h(V):
    return 1.0 / (1.0 + np.exp(-(V + 35.0) / 10.0))

def alpha_n(V):
    return 0.01 * (V + 55.0) / (1.0 - np.exp(-(V + 55.0) / 10.0))

def beta_n(V):
    return 0.125 * np.exp(-(V + 65.0) / 80.0)

# Arrays to store results
V_hist = np.zeros_like(t)
m_hist = np.zeros_like(t)
h_hist = np.zeros_like(t)
n_hist = np.zeros_like(t)

# Euler method integration
for i in range(len(t)):
    V_hist[i] = V
    m_hist[i] = m
    h_hist[i] = h
    n_hist[i] = n

    # Compute currents
    I_Na = g_Na * m**3 * h * (V - E_Na)
    I_K = g_K * n**4 * (V - E_K)
    I_L = g_L * (V - E_L)

    # Update membrane potential
    dV_dt = (I_ext[i] - I_Na - I_K - I_L) / C_m
    V += dV_dt * dt

    # Update gating variables
    dm_dt = alpha_m(V) * (1 - m) - beta_m(V) * m
    dh_dt = alpha_h(V) * (1 - h) - beta_h(V) * h
    dn_dt = alpha_n(V) * (1 - n) - beta_n(V) * n

    m += dm_dt * dt
    h += dh_dt * dt
    n += dn_dt * dt

# Plot results
plt.figure(figsize=(10, 6))
plt.plot(t, V_hist, label='Membrane Potential (mV)')
plt.xlabel('Time (ms)')
plt.ylabel('V (mV)')
plt.title('Hodgkin-Huxley Model Simulation')
plt.legend()
plt.grid(True)
plt.show()