import numpy as np
from scipy.integrate import quad

def likelihood(y, x, a, b):
    lambda_x = np.exp(a * x + b)
    return np.exp(-lambda_x) * (lambda_x ** y) / np.math.factorial(y)

def prior(x, mu, sigma):
    return np.exp(-(x - mu)**2 / (2 * sigma**2)) / np.sqrt(2 * np.pi * sigma**2)

def posterior(x, y, a, b, mu, sigma):
    numerator = likelihood(y, x, a, b) * prior(x, mu, sigma)
    denominator, _ = quad(lambda x: likelihood(y, x, a, b) * prior(x, mu, sigma), -np.inf, np.inf)
    return numerator / denominator