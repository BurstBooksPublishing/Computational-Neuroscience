import numpy as np

# Initialize synaptic weights
W_IV_to_IIIII = np.random.randn(100, 100) * 0.1
W_IIIII_to_V = np.random.randn(100, 100) * 0.1
W_V_to_VI = np.random.randn(100, 100) * 0.1

# Define activation function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Simulate network dynamics
def simulate_network(inputs, W_IV_to_IIIII, W_IIIII_to_V, W_V_to_VI):
    layer_IV = sigmoid(inputs)
    layer_IIIII = sigmoid(np.dot(layer_IV, W_IV_to_IIIII))
    layer_V = sigmoid(np.dot(layer_IIIII, W_IIIII_to_V))
    layer_VI = sigmoid(np.dot(layer_V, W_V_to_VI))
    return layer_VI