FROM python:3.9-slim
RUN pip install numpy matplotlib brian2
COPY simulation_script.py /app/
WORKDIR /app
CMD ["python", "simulation_script.py"]
Mathematical models in computational neuroscience often involve differential equations to describe the dynamics of neurons and synapses. For example, the Hodgkin-Huxley model describes the generation of action potentials in neurons using the following set of equations:
\[ C_m \frac{dV}{dt} = I_{ext} - g_{Na} m^3 h (V - E_{Na}) - g_K n^4 (V - E_K) - g_L (V - E_L) \] \[ \frac{dm}{dt} = \alpha_m (V) (1 - m) - \beta_m (V) m \] \[ \frac{dh}{dt} = \alpha_h (V) (1 - h) - \beta_h (V) h \] \[ \frac{dn}{dt} = \alpha_n (V) (1 - n) - \beta_n (V) n \]
These equations can be implemented in Python using the Brian2 simulator as follows:
\begin{lstlisting}
from brian2 import *

# Parameters
Cm = 1 * uF / cm**2
gNa = 120 * mS / cm**2
gK = 36 * mS / cm**2
gL = 0.3 * mS / cm**2
ENa = 50 * mV
EK = -77 * mV
EL = -54.4 * mV

# Equations
eqs = '''
dv/dt = (I_ext - gNa * m**3 * h * (v - ENa) - gK * n**4 * (v - EK) - gL * (v - EL)) / Cm : volt
dm/dt = alpha_m * (1 - m) - beta_m * m : 1
dh/dt = alpha_h * (1 - h) - beta_h * h : 1
dn/dt = alpha_n * (1 - n) - beta_n * n : 1
alpha_m = (0.1 * (v + 40 * mV)) / (1 - exp(-(v + 40 * mV) / (10 * mV))) / ms : Hz
beta_m = 4 * exp(-(v + 65 * mV) / (18 * mV)) / ms : Hz
alpha_h = 0.07 * exp(-(v + 65 * mV) / (20 * mV)) / ms : Hz
beta_h = 1 / (1 + exp(-(v + 35 * mV) / (10 * mV))) / ms : Hz
alpha_n = (0.01 * (v + 55 * mV)) / (1 - exp(-(v + 55 * mV) / (10 * mV))) / ms : Hz
beta_n = 0.125 * exp(-(v + 65 * mV) / (80 * mV)) / ms : Hz
I_ext : amp
'''

# Neuron group
neuron = NeuronGroup(1, eqs, method='exponential_euler')
neuron.v = -65 * mV
neuron.I_ext = 0.1 * nA

# Monitor
mon = StateMonitor(neuron, 'v', record=True)

# Simulation
run(100 * ms)