import numpy as np

# Define hidden states, observations, and parameters
hidden_states = ['Resting', 'Active']
observations = ['Low', 'High']
transition_matrix = np.array([[0.8, 0.2],
                              [0.3, 0.7]])
emission_matrix = np.array([[0.9, 0.1],
                            [0.2, 0.8]])
initial_distribution = np.array([0.6, 0.4])

# Simulate HMM
def simulate_hmm(transition_matrix, emission_matrix, initial_distribution, steps):
    state_sequence = []
    observation_sequence = []
    current_state = np.random.choice(len(hidden_states), p=initial_distribution)
    for _ in range(steps):
        state_sequence.append(current_state)
        observation = np.random.choice(len(observations), p=emission_matrix[current_state])
        observation_sequence.append(observation)
        current_state = np.random.choice(len(hidden_states), p=transition_matrix[current_state])
    return state_sequence, observation_sequence

# Example simulation
steps = 10
hidden_seq, obs_seq = simulate_hmm(transition_matrix, emission_matrix, initial_distribution, steps)
print('Hidden States:', [hidden_states[i] for i in hidden_seq])
print('Observations:', [observations[i] for i in obs_seq])